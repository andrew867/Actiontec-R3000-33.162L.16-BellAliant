#!/bin/bash

source $KERNEL_DIR/.config

TOP_DIR=`pwd`

if [ "$MOD_DIR" == "" ] ; then
    MOD_DIR=$PROFILE/modules
fi

if [ "$FSSRC_DIR" == "" ]; then
    FSSRC_DIR=./fs.src
fi

if [ "$INSTALL_DIR" == "" ]; then
    INSTALL_DIR=./$PROFILE/fs.install
fi

cd /opt/toolchains/crosstools-arm-gcc-4.6-linux-3.4-uclibc-0.9.32-binutils-2.21-NPTL/lib
cp libcdkshell.so libvlanctl.so libphysym.so libcdkpkgsrc.so libcdklibc.so libbmdapi.so libcdkdsym.so libbmdshell.so libbmedia.so libcdksym.so libbdlna.so libphypkgsrc.so libcms_dal.so libphygeneric.so libbmdshared.so libbmdpkgsrc.so libcms_core.so libcdkmain.so librdpactl.so libfcctl.so libtr143_utils.so libphyutil.so libb_playback_ip.so libnanoxml.so libethswctl.so libpwrctl.so libsnoopctl.so libcms_cli.so libtmctl.so libmdm.so libcms_qdm.so libbdlna-dms-aal.so libbdlna-dms.so libcdkshared.so  libcms_msg.so libcms_util.so libcms_boardctl.so libdbus.so libnvram.so libwlmngr.so  $TOP_DIR/$PROFILE/fs.install/lib
cd $TOP_DIR
ROOTFS=$PROFILE/fs

# Create file system dir
if [ -L $ROOTFS ]; then
  rm -rf $ROOTFS/*
else
  rm -rf $ROOTFS
  mkdir $ROOTFS
fi
chmod 777 $ROOTFS
# Copy files onto root file system
echo "Creating target root file system..."
cp -av $FSSRC_DIR/* $ROOTFS
find $ROOTFS -name ".svn" -exec rm -rf '{}' \;

# convert Snn*.symlink and Knn*.symlink files to real symlinks
flist=`ls ${ROOTFS}/etc/rc3.d/S*.symlink ${ROOTFS}/etc/rc3.d/K*.symlink 2> /dev/null`
for f in $flist
do
	f=$(basename $f)
	numbase=${f%.*}
	namebase=`echo $numbase | cut -c 4-`
	(cd ${ROOTFS}/etc/rc3.d; rm -f ${numbase}.symlink; ln -s ../init.d/${namebase}.sh ${numbase})
done

cp -av $INSTALL_DIR/* $ROOTFS

# check for custom inittab file
if [ -f $ROOTFS/etc/inittab.custom ] ; then
	echo -e "Using custom /etc/inittab file"
	rm -f $ROOTFS/etc/inittab
	mv $ROOTFS/etc/inittab.custom $ROOTFS/etc/inittab
fi

# Create directories as needed
mkdir $ROOTFS/dev
mkdir $ROOTFS/mnt
mkdir $ROOTFS/sys
mkdir $ROOTFS/proc
mkdir $ROOTFS/var
mkdir $ROOTFS/etc/adsl
mkdir $ROOTFS/data
cp -av $BRCMDRIVERS_DIR/broadcom/char/adsl/bcm9$BRCM_CHIP/*.bin  $ROOTFS/etc/adsl

# debugfs
if [ "$BUILD_DEBUG_TOOLS" == "y" ] ; then
    chmod +w $ROOTFS/etc/fstab
    echo -e "debugfs\t/sys/kernel/debug\tdebugfs\tnofail\t0\t0\n" >> $ROOTFS/etc/fstab
    chmod -w $ROOTFS/etc/fstab
    rm -rf $ROOTFS/sys/kernel/debug
    mkdir -p $ROOTFS/sys/kernel/debug
    rm -f $ROOTFS/debug
    ln -s sys/kernel/debug $ROOTFS/debug
fi

# Update kernel directory based on kernel:
sed -i "s|^KERNELVER=_set_by_buildFS_$|KERNELVER=$LINUX_VER_STR|" $ROOTFS/etc/init.d/*.sh;

if [ "$BRCM_CHIP" == "6816" ] ; then
        mkdir $ROOTFS/etc/cmf
        if [ "$CONFIG_BCM_GPON_160MHz_FFE" == "y" ] ; then
             cp -av $BRCMDRIVERS_DIR/broadcom/char/pktcmf/bcm9$BRCM_CHIP/ffe/*160MHz*.h  $ROOTFS/etc/cmf
             cp -av $BRCMDRIVERS_DIR/broadcom/char/pktcmf/bcm9$BRCM_CHIP/ffe/*160MHz*.obj  $ROOTFS/etc/cmf
             cp -av $BRCMDRIVERS_DIR/broadcom/char/pktcmf/bcm9$BRCM_CHIP/ffe/cmfcfg_160MHz  $ROOTFS/etc/cmf/cmfcfg
        else
             cp -av $BRCMDRIVERS_DIR/broadcom/char/pktcmf/bcm9$BRCM_CHIP/ffe/*.h  $ROOTFS/etc/cmf
             cp -av $BRCMDRIVERS_DIR/broadcom/char/pktcmf/bcm9$BRCM_CHIP/ffe/*.obj  $ROOTFS/etc/cmf
             cp -av $BRCMDRIVERS_DIR/broadcom/char/pktcmf/bcm9$BRCM_CHIP/ffe/cmfcfg  $ROOTFS/etc/cmf
             rm -f $ROOTFS/etc/cmf/*160MHz*
             rm -f $ROOTFS/etc/cmf/*6818*
        fi
fi

if [ "$BRCM_CHIP" == "6818" ] ; then
        mkdir $ROOTFS/etc/cmf
        cp -av $BRCMDRIVERS_DIR/broadcom/char/pktcmf/bcm9$BRCM_CHIP/ffe/*6818*.h  $ROOTFS/etc/cmf
        cp -av $BRCMDRIVERS_DIR/broadcom/char/pktcmf/bcm9$BRCM_CHIP/ffe/*6818*.obj  $ROOTFS/etc/cmf
        cp -av $BRCMDRIVERS_DIR/broadcom/char/pktcmf/bcm9$BRCM_CHIP/ffe/cmfcfg_6818cmf  $ROOTFS/etc/cmf/cmfcfg
fi

if [ "$BRCM_KERNEL_OPROFILE" == "y" ] ; then
   mkdir -p $ROOTFS/dev/oprofile
fi


# this tells busybox to set the core rlimit to unlimited, thus allowing
# apps to dump their core when they crash
if [ "$CONFIG_ELF_CORE" == "y" ]; then
   touch $ROOTFS/.init_enable_core
fi

# copy our top level PROFILE file to filesystem for debugging
if [ "$BUILD_DEBUG_TOOLS" == "y" ]; then
    echo "Include a copy of PROFILE file in system image"
    rm -f $ROOTFS/etc/$PROFILE
    cp $PROFILE_DIR/$PROFILE $ROOTFS/etc
fi


DEFAULTCFG=`echo $DEFAULTCFG_DIR/$BRCM_DEFAULTCFG|sed -e 's/\"//g'`
if [ -f "$DEFAULTCFG" ]; then
   cp -v $DEFAULTCFG $ROOTFS/etc/default.cfg; chmod a+r $ROOTFS/etc/default.cfg
elif [ $BRCM_DEFAULTCFG != '""' ]; then
   echo
   echo "        No default run-time config file called $BRCM_DEFAULTCFG in $DEFAULTCFG_DIR"
   echo "        Check your profile setting!"
   exit 1
else
   echo
fi

#
# The logic to test BRCM_CERT_FILE must be different than the logic to test
# BRCM_DEFAULTCFG (above) because BRCM_CERT_FILE can have 3 possible values:
# 1. If user does not select TR69_BCM_SSL, then BRCM_CERT_FILE=
# 2. If user selects TR69_BCM_SSL, but does not specify a cert file, then BRCM_CERT_FILE=""
# 3. If user selects TR69_BMC_SSL, and specifies a cert file, then BRCM_CERT_FILE="somefilename"
#
# The elif line tests for case 1 first, so that if BRCM_CERT_FILE is blank,
# the first condition will be false and the second condition [ $BRCM_CERT_FILE != '""' ]
# will not be tested.  That second condition will cause bash to complain if BRCM_CERT_FILE is blank.
#
DEFAULT_CERT_FILE=`echo $DEFAULTCFG_DIR/$BRCM_CERT_FILE|sed -e 's/\"//g'`

if [ -f "$DEFAULT_CERT_FILE" ]; then
   cp -v $DEFAULT_CERT_FILE $ROOTFS/etc/acscert.cacert; chmod a+r $ROOTFS/etc/acscert.cacert
elif [ "X$BRCM_CERT_FILE" != "X" ] && [ $BRCM_CERT_FILE != '""' ]; then
   echo
   echo "        No certificate file called $BRCM_CERT_FILE in $DEFAULTCFG_DIR"
   echo "        Check your profile setting!"
   exit 1
else
   echo
fi

# Create symbolic links
mkdir $ROOTFS/dev/misc
ln -s /var/fuse $ROOTFS/dev/misc/fuse
ln -s /var/fuse $ROOTFS/dev/fuse
ln -s /var/mtab $ROOTFS/etc/mtab
ln -s /var/log/log $ROOTFS/dev/log
ln -s /var/sysmsg $ROOTFS/etc/sysmsg
ln -s /var/passwd $ROOTFS/etc/passwd
ln -s /var/group $ROOTFS/etc/group
ln -s /var/ppp/pppmsg $ROOTFS/etc/pppmsg
ln -s /var/fyi/sys/dns $ROOTFS/etc/resolv.conf
ln -s /var/fyi/sys/gateway $ROOTFS/etc/gateway.conf
ln -s /var/udhcpd/udhcpd.conf $ROOTFS/etc/udhcpd.conf
ln -s /var/udhcpd/udhcpd.leases $ROOTFS/etc/udhcpd.leases
ln -s /var/dms.conf $ROOTFS/etc/dms.conf
ln -s /var/ipsec/ipsec.conf $ROOTFS/etc/ipsec.conf
ln -s /var/ipsec/racoon.conf $ROOTFS/etc/racoon.conf
ln -s /var/ipsec/psk.txt $ROOTFS/etc/psk.txt
ln -s /var/iproute2/rt_tables $ROOTFS/etc/iproute2/rt_tables
ln -s /var/tmp $ROOTFS/tmp
ln -s /var/samba $ROOTFS/etc/samba
ln -s /data $ROOTFS/usr/local/data

if [ -x $PROFILE/special-buildFS ]; then
   $PROFILE/special-buildFS
fi

# Copy proprietary binaries if any
FSBIN=`ls $TOP_DIR/fs.bin|wc -l`
if [ $FSBIN != 0 ]; then
   echo "Copying proprietary binaries..."
   cd $TOP_DIR
   cp -avf fs.bin/* $ROOTFS
fi

# Copy 3rdParty supplied .ko onto dummy .ko
if [ "$BRCM_DRIVER_ISDN" == "m" ] ; then
   echo "Copying 3rdParty kernel objects (.ko) ..."
   eval "find $TOP_DIR/$ROOTFS/../modules/lib/modules/. -name '*isdn.ko' | xargs cp -f $BRCMDRIVERS_DIR/broadcom/char/isdn/bcm9$BRCM_CHIP/3rdParty/*isdn.ko_3rdParty "
fi

#Copying gpon tools
if [ "$BRCM_DRIVER_GPON" != "" ] ; then
   if [ "$CONFIG_BCM_GPON_IMPL" == "2" ]; then
     TGT_DIR=$ROOTFS/etc
   else
     TGT_DIR=$ROOTFS/opt
   fi

   echo "Copying gpon tools to $TGT_DIR"
     if [ "$BRCM_GPON_FPGA" == "y" ]; then
     cp -avrf $BRCMDRIVERS_DIR/broadcom/char/gpon/impl$CONFIG_BCM_GPON_IMPL/fs/fpga/gpon/* $TGT_DIR
     else
     cp -avrf $BRCMDRIVERS_DIR/broadcom/char/gpon/impl$CONFIG_BCM_GPON_IMPL/fs/6816/gpon/* $TGT_DIR
	  rm -rf $TGT_DIR/scripts/rsmibclr*
     if [ "$BRCM_CHIP" != "6816" ]; then
     cp -avrf $BRCMDRIVERS_DIR/broadcom/char/gpon/impl$CONFIG_BCM_GPON_IMPL/fs/6816/gpon/scripts/rsmibclr_6818 $TGT_DIR/scripts/rsmibclr
     else
     cp -avrf $BRCMDRIVERS_DIR/broadcom/char/gpon/impl$CONFIG_BCM_GPON_IMPL/fs/6816/gpon/scripts/rsmibclr $TGT_DIR/scripts/
     fi
     fi

   if [ -d $ROOTFS/opt/modules ]; then
     pushd $ROOTFS/opt/modules && for f in *.ko.save; do mv "$f" "${f%.ko.save}.ko"; done
     popd
   fi
fi

#Copying i2c scripts to /opt/scripts
if [ "$BRCM_DRIVER_I2C" != "" ] ; then
   echo "Copying i2c scripts to /opt/"
   cp -avrf $BRCMDRIVERS_DIR/broadcom/char/i2c/chips/impl1/fs/* $ROOTFS/opt
fi

#Copying bcmlog tools to /usr/local
if [ "$BRCM_DRIVER_LOG" != "" ] ; then
   echo "Copying proc/bcmlog tools to /opt/..."
   cp -avrf $BUILD_DIR/userspace/public/scripts/procbcmlog/* $ROOTFS/opt/scripts
   if [ "$BRCM_CHIP" != "6816" ] && [ "$BRCM_CHIP" != "6818" ] && [ "$BRCM_CHIP" != "63268" ]; then
      rm -f $ROOTFS/opt/scripts/ssrw
   fi
   if [ -d $ROOTFS/opt/modules ]; then
     pushd $ROOTFS/opt/modules && for f in *.ko.save; do mv "$f" "${f%.ko.save}.ko"; done
     popd
   fi
fi

cd $MOD_DIR
cp -a lib $TOP_DIR/$ROOTFS/.

if [ "$STRIP" != "/bin/touch" ]; then
# Stripping unneeded module symbols only when strip is "enabled"
echo "Stripping kernel modules..."
find $TOP_DIR/$ROOTFS/lib/modules -name "*.ko"
   if [ "$CONFIG_KALLSYMS" == "y" ]; then
      #if KALLSYMS is enabled only strip debug symbols from all modules, this helps
      #to retain symbols of static functions 
      eval "find $TOP_DIR/$ROOTFS/lib/modules -name '*.ko' |xargs $STRIP --strip-debug"
   else
      #Modules that need parameters cannot be stripped
      eval "find $TOP_DIR/$ROOTFS/lib/modules -name '*.ko' ! -name 'ip*.ko' |xargs $STRIP --strip-unneeded"
      # However do strip debug symbols, in case debug symbols are included
      eval "find $TOP_DIR/$ROOTFS/lib/modules -name 'ip*.ko' |xargs $STRIP --strip-debug"
   fi
fi


#delete unwanted module
echo "deleting intermediate wl modules"
MODULE_CLEAN_UP="wldrv.ko wl_tmp_partial.ko wlpartial.ko"
#remove unnecessary wlan driver
if [ "${WLBUS}"  != "" ]; then
    if [ `expr index $WLBUS pci` == 0 ]; then
           MODULE_CLEAN_UP=${MODULE_CLEAN_UP}" wl.ko"
    fi
    if [ `expr index $WLBUS usb` == 0 ]; then
           MODULE_CLEAN_UP=${MODULE_CLEAN_UP}" wl-usb.ko"
    fi
else
   MODULE_CLEAN_UP=${MODULE_CLEAN_UP}" wl-usb.ko"
fi
for f in $MODULE_CLEAN_UP; do \
   eval "find $TOP_DIR/$ROOTFS/lib/modules -name $f |xargs rm -f";\
done
eval "find $TOP_DIR/$ROOTFS/lib/modules -name wlobj-*.ko | xargs rm -f"

# strip userspace binaries is sstrip is "enabled"
# sstrip is set to /bin/touch if BUILD_GDBSERVER=y
if [ "$SSTRIP" != "/bin/touch" ]; then
    # Even though libcreduction did some stripping, we can make the
    # libraries even smaller by doing sstrip here.  Also libcreduction
    # does not process all libs, e.g. libmdm.so
    echo "Stripping userspace binaries..."
    $SSTRIP $TOP_DIR/$ROOTFS/bin/* $TOP_DIR/$ROOTFS/lib/*.so* $TOP_DIR/$ROOTFS/lib/*/*.so*
fi

# Symlink the CMS libraries needed by busybox, which is also /sbin/init (the
# first userspace process).  Once busybox is able to load and start,
# it will read /etc/profile to get the LD_LIBRARY_PATH which points to all
# the CMS libraries in their non-standard places.  The LD_LIBRARY_PATH is 
# inherited by all userspace processes.
test -e $TOP_DIR/$ROOTFS/lib/public/libcms_msg.so && ln -s /lib/public/libcms_msg.so $TOP_DIR/$ROOTFS/lib/libcms_msg.so
test -e $TOP_DIR/$ROOTFS/lib/public/libcms_boardctl.so && ln -s /lib/public/libcms_boardctl.so $TOP_DIR/$ROOTFS/lib/libcms_boardctl.so
test -e $TOP_DIR/$ROOTFS/lib/public/libcms_util.so && ln -s /lib/public/libcms_util.so $TOP_DIR/$ROOTFS/lib/libcms_util.so


###################################################
# ACTIONTEC DO MERGE
##################################################
if [ "$AEI_VDSL_CUSTOMER_NCS" != "" -o "$AEI_VDSL_BCMSDK" != "" ]; then
echo "##############################"
echo " Do Actiontec merge ..."
echo "##############################"
if [ -d $ACT_COMMON_PATH ]; then
	cd $ACT_COMMON_PATH
	./$ACT_MERGE_ACTION
fi
if [ -d $ACT_PROJECT_PATH ]; then
	cd $ACT_PROJECT_PATH
	./$ACT_MERGE_ACTION
fi

if [ "$AEI_VDSL_WP" == "1" ]; then
    ln -sf /var/wirelesssettings.xml  $TOP_DIR/$ROOTFS/webs/wirelesssettings.xml
    ln -sf /var/firmwarelinks.xml  $TOP_DIR/$ROOTFS/webs/firmwarelinks.xml
fi

if [ "$AEI_VDSL_GUI_STYLE_CHANGE" == "1" ]; then
    ln -sf /data/webs/basic.css $TOP_DIR/$ROOTFS/webs/css/basic.css
    ln -sf /data/webs/actiontec2.css $TOP_DIR/$ROOTFS/webs/css/actiontec2.css
    ln -sf /data/webs/logo.jpg $TOP_DIR/$ROOTFS/webs/images/logo.jpg
    ln -sf /data/webs/bx_btm.png $TOP_DIR/$ROOTFS/webs/images/bx_btm.png
    ln -sf /data/webs/bx_mid.png $TOP_DIR/$ROOTFS/webs/images/bx_mid.png
    ln -sf /data/webs/bx_top.png $TOP_DIR/$ROOTFS/webs/images/bx_top.png
    ln -sf /data/webs/colbtm.png $TOP_DIR/$ROOTFS/webs/images/colbtm.png
    ln -sf /data/webs/colmid.png $TOP_DIR/$ROOTFS/webs/images/colmid.png
    ln -sf /data/webs/coltop.png $TOP_DIR/$ROOTFS/webs/images/coltop.png
    ln -sf /data/webs/mp_btm.png $TOP_DIR/$ROOTFS/webs/images/mp_btm.png
    ln -sf /data/webs/mp_mid.png $TOP_DIR/$ROOTFS/webs/images/mp_mid.png
    ln -sf /data/webs/mp_top.png $TOP_DIR/$ROOTFS/webs/images/mp_top.png
    ln -sf /data/webs/nav_btm.png $TOP_DIR/$ROOTFS/webs/images/nav_btm.png
    ln -sf /data/webs/nav_mid.png $TOP_DIR/$ROOTFS/webs/images/nav_mid.png
    ln -sf /data/webs/nav_top.png $TOP_DIR/$ROOTFS/webs/images/nav_top.png
    ln -sf /data/webs/nav_list.gif $TOP_DIR/$ROOTFS/webs/images/nav_list.gif
    ln -sf /data/webs/lft_bx_btm.png $TOP_DIR/$ROOTFS/webs/images/lft_bx_btm.png
    ln -sf /data/webs/lft_bx_mid.png $TOP_DIR/$ROOTFS/webs/images/lft_bx_mid.png
    ln -sf /data/webs/lft_bx_top.png $TOP_DIR/$ROOTFS/webs/images/lft_bx_top.png
    ln -sf /data/webs/content_btn_l1.png $TOP_DIR/$ROOTFS/webs/images/button/content_btn_l1.png
    ln -sf /data/webs/content_btn_l2.png $TOP_DIR/$ROOTFS/webs/images/button/content_btn_l2.png
    ln -sf /data/webs/content_btn_l3.png $TOP_DIR/$ROOTFS/webs/images/button/content_btn_l3.png
    ln -sf /data/webs/content_btn_r1.png $TOP_DIR/$ROOTFS/webs/images/button/content_btn_r1.png
    ln -sf /data/webs/content_btn_r2.png $TOP_DIR/$ROOTFS/webs/images/button/content_btn_r2.png
    ln -sf /data/webs/content_btn_r3.png $TOP_DIR/$ROOTFS/webs/images/button/content_btn_r3.png
    ln -sf /data/webs/menu_1.png $TOP_DIR/$ROOTFS/webs/images/menu_1.png
    ln -sf /data/webs/menu_1_g.png $TOP_DIR/$ROOTFS/webs/images/menu_1_g.png
    ln -sf /data/webs/menu_1_on.png $TOP_DIR/$ROOTFS/webs/images/menu_1_on.png
    ln -sf /data/webs/menu_2.png $TOP_DIR/$ROOTFS/webs/images/menu_2.png
    ln -sf /data/webs/menu_2_g.png $TOP_DIR/$ROOTFS/webs/images/menu_2_g.png
    ln -sf /data/webs/menu_2_on.png $TOP_DIR/$ROOTFS/webs/images/menu_2_on.png
    ln -sf /data/webs/menu_4.png $TOP_DIR/$ROOTFS/webs/images/menu_4.png
    ln -sf /data/webs/menu_4_g.png $TOP_DIR/$ROOTFS/webs/images/menu_4_g.png
    ln -sf /data/webs/menu_4_on.png $TOP_DIR/$ROOTFS/webs/images/menu_4_on.png
    ln -sf /data/webs/menu_5.png $TOP_DIR/$ROOTFS/webs/images/menu_5.png
    ln -sf /data/webs/menu_5_g.png $TOP_DIR/$ROOTFS/webs/images/menu_5_g.png
    ln -sf /data/webs/menu_5_on.png $TOP_DIR/$ROOTFS/webs/images/menu_5_on.png
    ln -sf /data/webs/menu_6.png $TOP_DIR/$ROOTFS/webs/images/menu_6.png
    ln -sf /data/webs/menu_6_g.png $TOP_DIR/$ROOTFS/webs/images/menu_6_g.png
    ln -sf /data/webs/menu_6_on.png $TOP_DIR/$ROOTFS/webs/images/menu_6_on.png
fi

# Memory Leak Toolkit - modify profile
if [ "$ACT_OPTIONS" = "memleak" ]; then
#MLT_MARK="#up eth0 for memory leak toolkit"
#MLT_LANIP_UP="ifconfig eth0 192.168.0.1 netmask 255.255.255.0 up"
#sed -e 's/smd/\n '"$MLT_MARK"'\n '"$MLT_LANIP_UP"'\n smd/g' $TOP_DIR/$ROOTFS/etc/profile > $TOP_DIR/$ROOTFS/etc/profile.tmp
#mv $TOP_DIR/$ROOTFS/etc/profile.tmp $TOP_DIR/$ROOTFS/etc/profile
chmod 755 $TOP_DIR/$ROOTFS/etc/profile
# Memory Leak Toolkit - copy some files needed
cd $HOSTTOOLS_DIR/memleak
cp -f thankyou.html $TOP_DIR/$ROOTFS/webs/
./bcm_copy.sh $BUILD_DIR $HOSTTOOLS_DIR/memleak
fi

fi

#if [ "$BUILD_QUANTENNA_11AC" == "m" ]; then
    cp $KERNEL_DIR/drivers/net/wireless/quantenna/patches/q11ac.sh $TOP_DIR/$ROOTFS/sbin/
    cp $KERNEL_DIR/drivers/net/wireless/quantenna/patches/qtn_reload.sh $TOP_DIR/$ROOTFS/sbin/
    cp $KERNEL_DIR/drivers/net/wireless/quantenna/patches/hotplug-script $TOP_DIR/$ROOTFS/sbin/
    cp -r $KERNEL_DIR/drivers/net/wireless/quantenna/firmware $TOP_DIR/$ROOTFS/lib/
#fi

# If a consumer release has created a filesystem tarball, fill in
# any missing proprietary binaries using that tarball
( cd $TOP_DIR/$ROOTFS ; tar xzkf ../filesystem.tgz 2>/dev/null ; true )

